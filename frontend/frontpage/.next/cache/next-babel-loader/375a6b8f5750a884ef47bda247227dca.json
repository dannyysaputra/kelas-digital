{"ast":null,"code":"var _jsxFileName = \"E:\\\\microservice-bwa\\\\Kelas-digital\\\\frontend\\\\frontpage\\\\pages\\\\random\\\\index.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nexport default function Random({\n  data\n}) {\n  return __jsx(React.Fragment, null, __jsx(\"h1\", {\n    className: \"text-2xl\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 13\n    }\n  }, \"Random words\"), __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 13\n    }\n  }, data.map(todo => {\n    var _todo$title;\n    return __jsx(\"li\", {\n      key: todo.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 32\n      }\n    }, (_todo$title = todo === null || todo === void 0 ? void 0 : todo.title) !== null && _todo$title !== void 0 ? _todo$title : \"-\", \" \", __jsx(Link, {\n      to: `/random/${todo.id}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 71\n      }\n    }));\n  })));\n}\nRandom.getInitialProps = async () => {\n  try {\n    const data = await fetch('https://jsonplaceholder.typicode.com/todos').then(response => response.json()).then(json => json);\n    return {\n      data\n    };\n  } catch (error) {}\n};","map":{"version":3,"names":["React","Random","data","__jsx","Fragment","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","map","todo","_todo$title","key","id","title","Link","to","getInitialProps","fetch","then","response","json","error"],"sources":["E:/microservice-bwa/Kelas-digital/frontend/frontpage/pages/random/index.js"],"sourcesContent":["import React from 'react'\r\n\r\nexport default function Random({data}) {\r\n    return (\r\n        <>\r\n            <h1 className='text-2xl'>Random words</h1>\r\n\r\n            <ul>\r\n                {\r\n                    data.map(todo => {\r\n                        return <li key={todo.id}>{todo?.title ?? \"-\"} <Link to={`/random/${todo.id}`}></Link></li>\r\n                    })\r\n                }\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nRandom.getInitialProps = async () => {\r\n    try {\r\n        const data = await fetch('https://jsonplaceholder.typicode.com/todos')\r\n        .then(response => response.json())\r\n        .then(json => json)\r\n\r\n        return { data }\r\n    } catch (error) {\r\n        \r\n    }\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,eAAe,SAASC,MAAMA,CAAC;EAACC;AAAI,CAAC,EAAE;EACnC,OACIC,KAAA,CAAAH,KAAA,CAAAI,QAAA,QACID,KAAA;IAAIE,SAAS,EAAC,UAAU;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,iBAAiB,CAAC,EAE1CR,KAAA;IAAAG,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAEQT,IAAI,CAACU,GAAG,CAACC,IAAI,IAAI;IAAA,IAAAC,WAAA;IACb,OAAOX,KAAA;MAAIY,GAAG,EAAEF,IAAI,CAACG,EAAG;MAAAV,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,IAAAG,WAAA,GAAED,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEI,KAAK,cAAAH,WAAA,cAAAA,WAAA,GAAI,GAAG,OAAEX,KAAA,CAACe,IAAI;MAACC,EAAE,EAAG,WAAUN,IAAI,CAACG,EAAG,EAAE;MAAAV,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CAAO,CAAK,CAAC;EAC9F,CAAC,CAEL,CACN,CAAC;AAEX;AAEAV,MAAM,CAACmB,eAAe,GAAG,YAAY;EACjC,IAAI;IACA,MAAMlB,IAAI,GAAG,MAAMmB,KAAK,CAAC,4CAA4C,CAAC,CACrEC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACE,IAAI,IAAIA,IAAI,CAAC;IAEnB,OAAO;MAAEtB;IAAK,CAAC;EACnB,CAAC,CAAC,OAAOuB,KAAK,EAAE,CAEhB;AACJ,CAAC"},"metadata":{},"sourceType":"module"}